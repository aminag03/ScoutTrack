// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoutTrack.Services.Database;

#nullable disable

namespace ScoutTrack.Services.Migrations
{
    [DbContext(typeof(ScoutTrackDbContext))]
    [Migration("20250701212311_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActivityMember", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ActivityMember");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fee")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TroopId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("Title");

                    b.HasIndex("TroopId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ActivityId", "EquipmentId")
                        .IsUnique();

                    b.ToTable("ActivityEquipments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId1")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId1");

                    b.HasIndex("ActivityId", "MemberId")
                        .IsUnique();

                    b.ToTable("ActivityRegistrations");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 10, 91, DateTimeKind.Utc).AddTicks(4980),
                            Description = "Basic first aid skills",
                            ImageUrl = "",
                            Name = "First Aid"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 10, 91, DateTimeKind.Utc).AddTicks(4994),
                            Description = "Learn how to safely handle fire",
                            ImageUrl = "",
                            Name = "Fire Safety"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 10, 91, DateTimeKind.Utc).AddTicks(4996),
                            Description = "Orientation and map skills",
                            ImageUrl = "",
                            Name = "Map Reading"
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.BadgeRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId", "Description")
                        .IsUnique();

                    b.ToTable("BadgeRequirements");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(151),
                            Name = "Banovići"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(167),
                            Name = "Banja Luka"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(168),
                            Name = "Bihać"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(169),
                            Name = "Bijeljina"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(170),
                            Name = "Bileća"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(173),
                            Name = "Bosanski Brod"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(174),
                            Name = "Bosanska Dubica"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(175),
                            Name = "Bosanska Gradiška"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(176),
                            Name = "Bosansko Grahovo"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(178),
                            Name = "Bosanska Krupa"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(178),
                            Name = "Bosanski Novi"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(179),
                            Name = "Bosanski Petrovac"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(180),
                            Name = "Bosanski Šamac"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(181),
                            Name = "Bratunac"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(182),
                            Name = "Brčko"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(183),
                            Name = "Breza"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(184),
                            Name = "Bugojno"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(189),
                            Name = "Busovača"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(190),
                            Name = "Bužim"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(201),
                            Name = "Cazin"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(202),
                            Name = "Čajniče"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(203),
                            Name = "Čapljina"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(205),
                            Name = "Čelić"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(206),
                            Name = "Čelinac"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(207),
                            Name = "Čitluk"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(208),
                            Name = "Derventa"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(209),
                            Name = "Doboj"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(210),
                            Name = "Donji Vakuf"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(211),
                            Name = "Drvar"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(212),
                            Name = "Foča"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(213),
                            Name = "Fojnica"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(214),
                            Name = "Gacko"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(215),
                            Name = "Glamoč"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(217),
                            Name = "Goražde"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(217),
                            Name = "Gornji Vakuf"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(218),
                            Name = "Gračanica"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(219),
                            Name = "Gradačac"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(220),
                            Name = "Grude"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(221),
                            Name = "Hadžići"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(222),
                            Name = "Han-Pijesak"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(222),
                            Name = "Hlivno"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(224),
                            Name = "Ilijaš"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(224),
                            Name = "Jablanica"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(225),
                            Name = "Jajce"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(226),
                            Name = "Kakanj"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(227),
                            Name = "Kalesija"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(228),
                            Name = "Kalinovik"
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(229),
                            Name = "Kiseljak"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(229),
                            Name = "Kladanj"
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(230),
                            Name = "Ključ"
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(231),
                            Name = "Konjic"
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(232),
                            Name = "Kotor-Varoš"
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(233),
                            Name = "Kreševo"
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(234),
                            Name = "Kupres"
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(234),
                            Name = "Laktaši"
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(235),
                            Name = "Lopare"
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(236),
                            Name = "Lukavac"
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(237),
                            Name = "Ljubinje"
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(238),
                            Name = "Ljubuški"
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(239),
                            Name = "Maglaj"
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(240),
                            Name = "Modriča"
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(240),
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(241),
                            Name = "Mrkonjić-Grad"
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(242),
                            Name = "Neum"
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(243),
                            Name = "Nevesinje"
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(245),
                            Name = "Novi Travnik"
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(246),
                            Name = "Odžak"
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(247),
                            Name = "Olovo"
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(254),
                            Name = "Orašje"
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(255),
                            Name = "Pale"
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(256),
                            Name = "Posušje"
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(256),
                            Name = "Prijedor"
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(257),
                            Name = "Prnjavor"
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(258),
                            Name = "Prozor"
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(259),
                            Name = "Rogatica"
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(260),
                            Name = "Rudo"
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(261),
                            Name = "Sanski Most"
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(261),
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(262),
                            Name = "Skender-Vakuf"
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(263),
                            Name = "Sokolac"
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(264),
                            Name = "Srbac"
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(265),
                            Name = "Srebrenica"
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(265),
                            Name = "Srebrenik"
                        },
                        new
                        {
                            Id = 84,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(266),
                            Name = "Stolac"
                        },
                        new
                        {
                            Id = 85,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(267),
                            Name = "Šekovići"
                        },
                        new
                        {
                            Id = 86,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(268),
                            Name = "Šipovo"
                        },
                        new
                        {
                            Id = 87,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(269),
                            Name = "Široki Brijeg"
                        },
                        new
                        {
                            Id = 88,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(270),
                            Name = "Teslić"
                        },
                        new
                        {
                            Id = 89,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(270),
                            Name = "Tešanj"
                        },
                        new
                        {
                            Id = 90,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(271),
                            Name = "Tomislav-Grad"
                        },
                        new
                        {
                            Id = 91,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(272),
                            Name = "Travnik"
                        },
                        new
                        {
                            Id = 92,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(273),
                            Name = "Trebinje"
                        },
                        new
                        {
                            Id = 93,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(274),
                            Name = "Trnovo"
                        },
                        new
                        {
                            Id = 94,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(275),
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 95,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(275),
                            Name = "Ugljevik"
                        },
                        new
                        {
                            Id = 96,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(276),
                            Name = "Vareš"
                        },
                        new
                        {
                            Id = 97,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(277),
                            Name = "Velika Kladuša"
                        },
                        new
                        {
                            Id = 98,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(278),
                            Name = "Visoko"
                        },
                        new
                        {
                            Id = 99,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(279),
                            Name = "Višegrad"
                        },
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(280),
                            Name = "Vitez"
                        },
                        new
                        {
                            Id = 101,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(281),
                            Name = "Vlasenica"
                        },
                        new
                        {
                            Id = 102,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(281),
                            Name = "Zavidovići"
                        },
                        new
                        {
                            Id = 103,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(282),
                            Name = "Zenica"
                        },
                        new
                        {
                            Id = 104,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(283),
                            Name = "Zvornik"
                        },
                        new
                        {
                            Id = 105,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(284),
                            Name = "Žepa"
                        },
                        new
                        {
                            Id = 106,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(285),
                            Name = "Žepče"
                        },
                        new
                        {
                            Id = 107,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 395, DateTimeKind.Utc).AddTicks(285),
                            Name = "Živinice"
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId", "MemberId", "CreatedAt");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("Title");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponderId");

                    b.HasIndex("RequesterId", "ResponderId")
                        .IsUnique();

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId", "MemberId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberId1")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("MemberId1");

                    b.HasIndex("MemberId", "BadgeId")
                        .IsUnique();

                    b.ToTable("MemberBadges");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadgeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("MemberBadgeId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("MemberBadgeId", "RequirementId")
                        .IsUnique();

                    b.ToTable("MemberBadgeProgresses");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCoverPhoto")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId", "ImageUrl")
                        .IsUnique();

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasFilter("[Token] IS NOT NULL");

                    b.HasIndex("UserAccountId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ActivityId", "MemberId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Admin", b =>
                {
                    b.HasBaseType("ScoutTrack.Services.Database.Entities.UserAccount");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 560, DateTimeKind.Utc).AddTicks(4740),
                            Email = "admin@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$m/H5WvK1f/mdWm4EHXCxo.LXpL84P0290VRdkn4nKaGTHDbyuctfa",
                            Role = 0,
                            Username = "admin",
                            FullName = ""
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Member", b =>
                {
                    b.HasBaseType("ScoutTrack.Services.Database.Entities.UserAccount");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TroopId")
                        .HasColumnType("int");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TroopId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Members", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 10, 91, DateTimeKind.Utc).AddTicks(5062),
                            Email = "scout1@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$3wngNDujunTqbZ3Vor7uTOT.k.2TU6XjJudtZuik1HMfHujl9kIIO",
                            Role = 2,
                            Username = "scout1",
                            BirthDate = new DateTime(2005, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            ContactPhone = "",
                            FirstName = "John",
                            Gender = 0,
                            LastName = "Doe",
                            ProfilePictureUrl = "",
                            TroopId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 10, 257, DateTimeKind.Utc).AddTicks(2627),
                            Email = "scout2@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$2Rl3vJiguygWxhzcIh1LwesgnZP/tOnYlG7pN1V1iSC9/tBRDoU/q",
                            Role = 2,
                            Username = "scout2",
                            BirthDate = new DateTime(2003, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 76,
                            ContactPhone = "",
                            FirstName = "Jane",
                            Gender = 1,
                            LastName = "Doe",
                            ProfilePictureUrl = "",
                            TroopId = 3
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Troop", b =>
                {
                    b.HasBaseType("ScoutTrack.Services.Database.Entities.UserAccount");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Troops", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 560, DateTimeKind.Utc).AddTicks(6920),
                            Email = "troopbl@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$w5mNtaFCn32T4f1acYb6d.IzK6cm0xArecXVX/OGgl97sOJ8LojdG",
                            Role = 1,
                            Username = "troopbl",
                            CityId = 2,
                            ContactPhone = "",
                            Latitude = 0.0,
                            LogoUrl = "",
                            Longitude = 0.0,
                            Name = "Troop Banja Luka"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 744, DateTimeKind.Utc).AddTicks(217),
                            Email = "troopsarajevo@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$BmSHU1rZZakPN3ufcTae0e6h0oDPOPxpo0NC31mgLTMA4390H8YlO",
                            Role = 1,
                            Username = "troopsarajevo",
                            CityId = 76,
                            ContactPhone = "",
                            Latitude = 0.0,
                            LogoUrl = "",
                            Longitude = 0.0,
                            Name = "Troop Sarajevo"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 1, 21, 23, 9, 908, DateTimeKind.Utc).AddTicks(2914),
                            Email = "troopmostar@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$jnsvenNpZJD5GDAMpuqcbuSmeHcy1NJMK.3GsiwI9VD3WAOq7yJKm",
                            Role = 1,
                            Username = "troopmostar",
                            CityId = 63,
                            ContactPhone = "",
                            Latitude = 0.0,
                            LogoUrl = "",
                            Longitude = 0.0,
                            Name = "Troop Mostar"
                        });
                });

            modelBuilder.Entity("ActivityMember", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Activity", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Troop", "Troop")
                        .WithMany("Activities")
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Troop");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityEquipment", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("EquipmentList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Equipment", "Equipment")
                        .WithMany("ActivityEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityRegistration", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("Registrations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", null)
                        .WithMany("ActivityRegistrations")
                        .HasForeignKey("MemberId1");

                    b.Navigation("Activity");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.BadgeRequirement", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Badge", "Badge")
                        .WithMany("Requirements")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Comment", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Document", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Admin", "Admin")
                        .WithMany("Documents")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Friendship", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Responder")
                        .WithMany()
                        .HasForeignKey("ResponderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Requester");

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Like", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadge", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Badge", "Badge")
                        .WithMany("MemberBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", null)
                        .WithMany("Badges")
                        .HasForeignKey("MemberId1");

                    b.Navigation("Badge");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadgeProgress", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.MemberBadge", "MemberBadge")
                        .WithMany()
                        .HasForeignKey("MemberBadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.BadgeRequirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MemberBadge");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Notification", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "UserAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Post", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("Posts")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "CreatedBy")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.PostImage", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.RefreshToken", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Review", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("Reviews")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany("Reviews")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Admin", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("ScoutTrack.Services.Database.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Member", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.City", "City")
                        .WithMany("Members")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("ScoutTrack.Services.Database.Entities.Member", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Troop", "Troop")
                        .WithMany("Members")
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Troop");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Troop", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.City", "City")
                        .WithMany("Troops")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("ScoutTrack.Services.Database.Entities.Troop", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Activity", b =>
                {
                    b.Navigation("EquipmentList");

                    b.Navigation("Posts");

                    b.Navigation("Registrations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Badge", b =>
                {
                    b.Navigation("MemberBadges");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.City", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Troops");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Equipment", b =>
                {
                    b.Navigation("ActivityEquipments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.UserAccount", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Admin", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Member", b =>
                {
                    b.Navigation("ActivityRegistrations");

                    b.Navigation("Badges");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Troop", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
