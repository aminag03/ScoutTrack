// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScoutTrack.Services.Database;

#nullable disable

namespace ScoutTrack.Services.Migrations
{
    [DbContext(typeof(ScoutTrackDbContext))]
    [Migration("20250830152817_notificationSender")]
    partial class notificationSender
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActivityMember", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .HasColumnType("int");

                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.HasKey("ActivitiesId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ActivityMember");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityState")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ActivityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fee")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TroopId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("Title");

                    b.HasIndex("TroopId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ActivityEquipments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ActivityId", "MemberId")
                        .IsUnique();

                    b.ToTable("ActivityRegistrations");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 16, 126, DateTimeKind.Local).AddTicks(3363),
                            Description = "Basic first aid skills",
                            ImageUrl = "",
                            Name = "First Aid"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 16, 126, DateTimeKind.Local).AddTicks(3465),
                            Description = "Learn how to safely handle fire",
                            ImageUrl = "",
                            Name = "Fire Safety"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 16, 126, DateTimeKind.Local).AddTicks(3470),
                            Description = "Orientation and map skills",
                            ImageUrl = "",
                            Name = "Map Reading"
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.BadgeRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId", "Description")
                        .IsUnique();

                    b.ToTable("BadgeRequirements");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(5942),
                            Latitude = 43.856299999999997,
                            Longitude = 18.4131,
                            Name = "Sarajevo"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6012),
                            Latitude = 44.772199999999998,
                            Longitude = 17.190999999999999,
                            Name = "Banja Luka"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6017),
                            Latitude = 44.539999999999999,
                            Longitude = 18.678999999999998,
                            Name = "Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6051),
                            Latitude = 44.203600000000002,
                            Longitude = 17.9084,
                            Name = "Zenica"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6055),
                            Latitude = 43.3431,
                            Longitude = 17.8078,
                            Name = "Mostar"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6063),
                            Latitude = 44.816699999999997,
                            Longitude = 15.8667,
                            Name = "Bihać"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6067),
                            Latitude = 44.755800000000001,
                            Longitude = 19.214400000000001,
                            Name = "Bijeljina"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6071),
                            Latitude = 44.981900000000003,
                            Longitude = 16.7133,
                            Name = "Prijedor"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6075),
                            Latitude = 44.875599999999999,
                            Longitude = 18.802,
                            Name = "Brčko"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6083),
                            Latitude = 44.737200000000001,
                            Longitude = 18.083300000000001,
                            Name = "Doboj"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6088),
                            Latitude = 44.994399999999999,
                            Longitude = 15.8225,
                            Name = "Cazin"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6094),
                            Latitude = 42.711399999999998,
                            Longitude = 18.3444,
                            Name = "Trebinje"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6098),
                            Latitude = 44.369199999999999,
                            Longitude = 19.106400000000001,
                            Name = "Zvornik"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6102),
                            Latitude = 45.212200000000003,
                            Longitude = 15.827500000000001,
                            Name = "Velika Kladuša"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6111),
                            Latitude = 44.884999999999998,
                            Longitude = 18.453299999999999,
                            Name = "Gradačac"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6115),
                            Latitude = 44.4178,
                            Longitude = 18.671700000000001,
                            Name = "Gračanica"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6119),
                            Latitude = 44.229399999999998,
                            Longitude = 17.660299999999999,
                            Name = "Travnik"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6127),
                            Latitude = 44.767200000000003,
                            Longitude = 16.686699999999998,
                            Name = "Sanski Most"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6166),
                            Latitude = 44.032499999999999,
                            Longitude = 17.4556,
                            Name = "Bugojno"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6171),
                            Latitude = 43.983899999999998,
                            Longitude = 18.185300000000002,
                            Name = "Visoko"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6175),
                            Latitude = 44.147500000000001,
                            Longitude = 18.177199999999999,
                            Name = "Kakanj"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6179),
                            Latitude = 44.543900000000001,
                            Longitude = 18.648599999999998,
                            Name = "Lukavac"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6183),
                            Latitude = 44.555,
                            Longitude = 18.487200000000001,
                            Name = "Srebrenik"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6187),
                            Latitude = 44.444200000000002,
                            Longitude = 18.223600000000001,
                            Name = "Zavidovići"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6192),
                            Latitude = 43.671700000000001,
                            Longitude = 18.947199999999999,
                            Name = "Goražde"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6196),
                            Latitude = 43.648600000000002,
                            Longitude = 17.861899999999999,
                            Name = "Konjic"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6200),
                            Latitude = 43.353099999999998,
                            Longitude = 17.431699999999999,
                            Name = "Široki Brijeg"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6204),
                            Latitude = 43.109400000000001,
                            Longitude = 17.6953,
                            Name = "Čapljina"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6208),
                            Latitude = 43.467500000000001,
                            Longitude = 17.375299999999999,
                            Name = "Grude"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6212),
                            Latitude = 44.342799999999997,
                            Longitude = 17.2714,
                            Name = "Jajce"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6216),
                            Latitude = 44.578099999999999,
                            Longitude = 17.1539,
                            Name = "Mrkonjić-Grad"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6221),
                            Latitude = 44.968600000000002,
                            Longitude = 18.051100000000002,
                            Name = "Modriča"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6225),
                            Latitude = 44.883299999999998,
                            Longitude = 16.149999999999999,
                            Name = "Bosanska Krupa"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6240),
                            Latitude = 44.272199999999998,
                            Longitude = 18.1053,
                            Name = "Kiseljak"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6245),
                            Latitude = 43.202500000000001,
                            Longitude = 17.684699999999999,
                            Name = "Čitluk"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6249),
                            Latitude = 42.925800000000002,
                            Longitude = 17.607800000000001,
                            Name = "Neum"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6253),
                            Latitude = 43.825299999999999,
                            Longitude = 17.015599999999999,
                            Name = "Livno"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6257),
                            Latitude = 43.649999999999999,
                            Longitude = 17.216699999999999,
                            Name = "Tomislav-Grad"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6261),
                            Latitude = 44.227499999999999,
                            Longitude = 17.659199999999998,
                            Name = "Novi Travnik"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6265),
                            Latitude = 43.4925,
                            Longitude = 18.805599999999998,
                            Name = "Foča"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6269),
                            Latitude = 44.559699999999999,
                            Longitude = 16.049700000000001,
                            Name = "Bosanski Petrovac"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6273),
                            Latitude = 44.4056,
                            Longitude = 18.531400000000001,
                            Name = "Banovići"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6278),
                            Latitude = 44.445300000000003,
                            Longitude = 18.585599999999999,
                            Name = "Olovo"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6282),
                            Latitude = 43.957500000000003,
                            Longitude = 18.344999999999999,
                            Name = "Ilijaš"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6286),
                            Latitude = 44.6111,
                            Longitude = 18.4178,
                            Name = "Tešanj"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6290),
                            Latitude = 44.536900000000003,
                            Longitude = 18.704999999999998,
                            Name = "Kalesija"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6294),
                            Latitude = 43.835000000000001,
                            Longitude = 17.5733,
                            Name = "Prozor"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6298),
                            Latitude = 45.145299999999999,
                            Longitude = 17.2592,
                            Name = "Bosanska Gradiška"
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 374, DateTimeKind.Local).AddTicks(6302),
                            Latitude = 43.059699999999999,
                            Longitude = 17.944400000000002,
                            Name = "Stolac"
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId", "CreatedById", "CreatedAt");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("Title");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByTroopId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Friendship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequesterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponderId");

                    b.HasIndex("RequesterId", "ResponderId")
                        .IsUnique();

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PostId", "CreatedById")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadgeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("MemberId", "BadgeId")
                        .IsUnique();

                    b.ToTable("MemberBadges");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadgeProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("MemberBadgeId")
                        .HasColumnType("int");

                    b.Property<int>("RequirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequirementId");

                    b.HasIndex("MemberBadgeId", "RequirementId")
                        .IsUnique();

                    b.ToTable("MemberBadgeProgresses");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedById");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsCoverPhoto")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId", "ImageUrl")
                        .IsUnique();

                    b.ToTable("PostImages");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasFilter("[Token] IS NOT NULL");

                    b.HasIndex("UserAccountId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ActivityId", "MemberId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Admin", b =>
                {
                    b.HasBaseType("ScoutTrack.Services.Database.Entities.UserAccount");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 553, DateTimeKind.Local).AddTicks(7733),
                            Email = "admin@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$LU7J2RdoKdKPrDm5RVlAYesFyOT0Sndmn56Yghs3tZ1bhGRyX/axe",
                            Role = 0,
                            Username = "admin",
                            FullName = ""
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Member", b =>
                {
                    b.HasBaseType("ScoutTrack.Services.Database.Entities.UserAccount");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TroopId")
                        .HasColumnType("int");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TroopId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Members", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 16, 126, DateTimeKind.Local).AddTicks(3567),
                            Email = "scout1@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$xXqMKZ6/Kny2/vlfYRAUjeFYu9GbT39DfnVaBbO3Egdzmdl1r4Q4i",
                            Role = 2,
                            Username = "scout1",
                            BirthDate = new DateTime(2005, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 2,
                            ContactPhone = "",
                            FirstName = "John",
                            Gender = 0,
                            LastName = "Doe",
                            ProfilePictureUrl = "",
                            TroopId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 16, 307, DateTimeKind.Local).AddTicks(620),
                            Email = "scout2@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$b/2hWRQGuM9zOyEs4p/aFedQc6qEAjtEwl5t3WO8jCbD4Z2P1mnF.",
                            Role = 2,
                            Username = "scout2",
                            BirthDate = new DateTime(2003, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CityId = 3,
                            ContactPhone = "",
                            FirstName = "Jane",
                            Gender = 1,
                            LastName = "Doe",
                            ProfilePictureUrl = "",
                            TroopId = 3
                        });
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Troop", b =>
                {
                    b.HasBaseType("ScoutTrack.Services.Database.Entities.UserAccount");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FoundingDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ScoutMaster")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TroopLeader")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Troops", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 553, DateTimeKind.Local).AddTicks(8590),
                            Email = "troopbl@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$0lYtB7SNbuvSE9nAHdJwUeEsWrnWmGLjw1VA7h.mW4bjy.9MT3WyG",
                            Role = 1,
                            Username = "troopbl",
                            CityId = 2,
                            ContactPhone = "",
                            FoundingDate = new DateTime(2025, 8, 30, 17, 28, 15, 553, DateTimeKind.Local).AddTicks(8572),
                            Latitude = 0.0,
                            LogoUrl = "",
                            Longitude = 0.0,
                            Name = "Troop Banja Luka",
                            ScoutMaster = "",
                            TroopLeader = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 740, DateTimeKind.Local).AddTicks(8470),
                            Email = "troopsarajevo@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$ClfBWJPgWoggR0PMlCW28ObRVsk7iakXyvtk.XApElwbHV8WWGjwO",
                            Role = 1,
                            Username = "troopsarajevo",
                            CityId = 1,
                            ContactPhone = "",
                            FoundingDate = new DateTime(2025, 8, 30, 17, 28, 15, 740, DateTimeKind.Local).AddTicks(8398),
                            Latitude = 0.0,
                            LogoUrl = "",
                            Longitude = 0.0,
                            Name = "Troop Sarajevo",
                            ScoutMaster = "",
                            TroopLeader = ""
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 30, 17, 28, 15, 943, DateTimeKind.Local).AddTicks(27),
                            Email = "troopmostar@scouttrack.ba",
                            IsActive = true,
                            PasswordHash = "$2a$11$7z9kiR84/xMdroHXcW2EXOdV9fJxUQNjXoA78K8DV0Vj/mhXR8JLa",
                            Role = 1,
                            Username = "troopmostar",
                            CityId = 5,
                            ContactPhone = "",
                            FoundingDate = new DateTime(2025, 8, 30, 17, 28, 15, 942, DateTimeKind.Local).AddTicks(9940),
                            Latitude = 0.0,
                            LogoUrl = "",
                            Longitude = 0.0,
                            Name = "Troop Mostar",
                            ScoutMaster = "",
                            TroopLeader = ""
                        });
                });

            modelBuilder.Entity("ActivityMember", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Activity", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("ScoutTrack.Services.Database.Entities.Troop", "Troop")
                        .WithMany("Activities")
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("City");

                    b.Navigation("Troop");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityEquipment", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("EquipmentList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Equipment", "Equipment")
                        .WithMany("ActivityEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityRegistration", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("Registrations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany("ActivityRegistrations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.BadgeRequirement", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Badge", "Badge")
                        .WithMany("Requirements")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Comment", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "CreatedBy")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Document", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Admin", "Admin")
                        .WithMany("Documents")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Friendship", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Responder")
                        .WithMany()
                        .HasForeignKey("ResponderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Requester");

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Like", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "CreatedBy")
                        .WithMany("Likes")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadge", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Badge", "Badge")
                        .WithMany("MemberBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany("MemberBadges")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.MemberBadgeProgress", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.MemberBadge", "MemberBadge")
                        .WithMany()
                        .HasForeignKey("MemberBadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.BadgeRequirement", "Requirement")
                        .WithMany()
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MemberBadge");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Notification", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Post", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("Posts")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "CreatedBy")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.PostImage", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.RefreshToken", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Review", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.Activity", "Activity")
                        .WithMany("Reviews")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Member", "Member")
                        .WithMany("Reviews")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Admin", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("ScoutTrack.Services.Database.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Member", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.City", "City")
                        .WithMany("Members")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("ScoutTrack.Services.Database.Entities.Member", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.Troop", "Troop")
                        .WithMany("Members")
                        .HasForeignKey("TroopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Troop");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Troop", b =>
                {
                    b.HasOne("ScoutTrack.Services.Database.Entities.City", "City")
                        .WithMany("Troops")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScoutTrack.Services.Database.Entities.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("ScoutTrack.Services.Database.Entities.Troop", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Activity", b =>
                {
                    b.Navigation("EquipmentList");

                    b.Navigation("Posts");

                    b.Navigation("Registrations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Badge", b =>
                {
                    b.Navigation("MemberBadges");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.City", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Troops");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Equipment", b =>
                {
                    b.Navigation("ActivityEquipments");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.UserAccount", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Admin", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Member", b =>
                {
                    b.Navigation("ActivityRegistrations");

                    b.Navigation("MemberBadges");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ScoutTrack.Services.Database.Entities.Troop", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
